# -*- coding: utf-8 -*-
"""fake news classifier using lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13YE0jEgIkCPpjHzVDVNth68DYOxcfCfo
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import keras

train=pd.read_csv('/content/drive/MyDrive/fake news train.csv')
test=pd.read_csv('/content/drive/MyDrive/fake news test.csv')

train.dropna(inplace=True)

X=train.drop(['label'], axis=1)
Y=train['label']

from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense

## vocab size\
voc_size=10000

messages=X.copy()
messages.reset_index(inplace=True)

import nltk
import re
from nltk.corpus import stopwords

nltk.download('stopwords')

## data preprocessing 
from nltk.stem import WordNetLemmatizer
import nltk
nltk.download('wordnet')
lm = WordNetLemmatizer()
corpus=[]
for i in range(0,len(messages)):
  print(i)
  review=re.sub('[^a-zA-Z]', ' ', messages['title'][i])
  review=review.lower()
  review=review.split()
  review=[lm.lemmatize(word) for word in review if not word in stopwords.words('english')]
  review=' '.join(review)
  corpus.append(review)

onehot_rep=[one_hot(words,voc_size)for words in corpus]
print(onehot_rep)

## fixing the sentence length
sent_lenght=20
embedded_doc=pad_sequences(onehot_rep, padding='pre', maxlen=sent_lenght)

embedded_doc[0]

## creating the model
embedding_vector_features=40
model=Sequential()
model.add(Embedding(voc_size, embedding_vector_features, input_length=sent_lenght))
model.add(LSTM(100))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())

X_final=np.array(embedded_doc)
Y_final=np.array(Y)

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(X_final,Y_final, test_size=0.2, random_state=44)

model.fit(xtrain,ytrain,validation_data=(xtest,ytest), epochs=10, batch_size=64)

## model with dropout layer
## creating the model
from tensorflow.keras.layers import Dropout
embedding_vector_features=40
model=Sequential()
model.add(Embedding(voc_size, embedding_vector_features, input_length=sent_lenght))
model.add(LSTM(100))
model.add(Dropout(0.3))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())

model.fit(xtrain,ytrain,validation_data=(xtest,ytest), epochs=50, batch_size=64)

from sklearn.metrics import accuracy_score

## using bidirectional LSTM
from tensorflow.keras.layers import Bidirectional
embedding_vector_features=40
model1=Sequential()
model1.add(Embedding(voc_size, embedding_vector_features, input_length=sent_lenght))
model1.add(Bidirectional(LSTM(100)))
model1.add(Dense(1,activation='sigmoid'))
model1.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model1.summary())

model1.fit(xtrain,ytrain,validation_data=(xtest,ytest), epochs=50, batch_size=64)

ypredict=model1.predict_classes(xtest)
from sklearn.metrics import confusion_matrix
CM=confusion_matrix(ytest,ypredict)

CM

ytest

